/**
\page guide_Timeline Using Timeline in Cinder

## Introduction ##

Cinder provides a tweening engine called Timeline for creating full featured animations. Timeline has been designed to easily animate variables over time without having to keep track of them. Flash developers familiar with [Tween Lite](http://www.greensock.com/tweenlite/) can use this as a somewhat similar context when working with Timeline. Those familiar with After Effects (AE) can use this as a frame of reference to visualize how Timeline is used.

## Basic Usage ##

The master class called Timeline manages a collection of *Anims*. Anims are variables that can be *tweened* or animated over time. The app <!-- the app class, namespace, project --> always contains a master timeline which is accessed similar to the way you would use console().

<br />
Before anything can be done first make sure timeline is included in your project:

\code
#include "cinder/Timeline.h"
\endcode

After you've included Timeline see below for a very basic example using it:
\code
Anim<float> radius;
radius = 0.0f;
timeline().apply( &radius, 10.0f, 1.5f, EaseOutCubic() );
\endcode

<br />

<!-- maybe show how this is represented in the draw function as well -->
<img src="#" alt="Tween code above in svg and js" width="450" height="250">

<br />

In the example above the variable *radius* is of Anim type. The value is then initialized to 0.0 as if you <!-- almost -->  you were actually using a float. On the master timeline we use the the apply function to tween the radius to a final value of 10.0 over 1.5 seconds using the EaseOutCubic function.  

It is important to note that the master timeline's apply function is accepting a *pointer* to the Anim radius along with the easing function used. The easing function is basically the equation that is applied to your Anim variable over time. This is described in more detail in the following section below.

<br />

## Ease Functions ##

Using Timeline you can apply different easing equations to produce a desired effect to your anims.

Below is a list and example of [Robert Penner's Easing Equations] (http://www.robertpenner.com/easing/):

<!-- Add visuals to how each one of these easing equations works... -->

<ul>
	<li> Linear
	<li> EaseInQuad
	<li> EaseOutQuad
	<li> EaseInCubic
	<li> EaseOutCubic
	<li> EaseInQuart
	<li> EaseOutQuart
	<li> EaseInOutQuart
	<li> EaseInQuint
	<li> EaseOutQuint
	<li> EaseInOutQuint
	<li> EaseInExpo
	<li> EaseOutExpo
	<li> EaseInCirc
	<li> EaseOutCirc
	<li> EaseInOutCirc
	<li> EaseInSine
	<li> EaseOutSine
	<li> EaseInOutSine
	<li> EaseInBack
	<li> EaseOutBack
	<li> EaseInOutBack
	<li> EaseInElastic
	<li> EaseOutElastic
	<li> EaseInOutElastic
	<li> EaseInBounce
	<li> EaseOutBounce
	<li> EaseInOutBounce
</ul>

<br />

Additionally, [Chris Mckenzie] (http://chrismckenzie.com/) has contributed a list of easing equations:

<ul>
	<li> EaseInAtan
	<li> EaseOutAtan
	<li> EaseInOutAtan
</ul>

<br />

## Callbacks ##

Within Timeline, callbacks can be trigged during certain points within your animation. Say for example you want to run a function at the start, during each update, and/or completion of your animation.

However, Timeline needs your callback function be in the following format:

<br />
<br />

<ul>
 <li> 1.) Free Function. This means your function must not be a member of a class or struct. Below is an example of timeline using a free function
</ul>

<br />


\code
class CustomCallbackApp : public AppBasic {
  public:
	void setup();
	void memberFunction();
	
	Anim<Vec2f> mPos;
};

void freeFunction()
{
	//this is your free function, it can
	//be any name just not a member of your class
	
	console() << "I'm being executed at the start of the animation" << std::endl;
}

void CustomCallbackApp::memberFunction()
{
  //just placed here to show the difference
}

void CustomCallbackApp::setup()
{
	//initialize mPos
	mPos = Vec2f( 0.0f, 0.0f );

	//start animation when program begins
	timeline().apply( &mCircle.mPos, Vec2f( 200.0f, 200.0f ), 2.0f, EaseInOutCubic() ).startFn(  freeFunction  );
}
 //maybe should place draw function in here....


\endcode

<br />

<ul>
 <li> 2.) Functors. Functors are a class with one or more private members to store the state and with an overloaded operator () to execute the function. [http://www.newty.de](http://www.newty.de/fpt/functor.html) 
</ul>

<br />

\code
class CustomCallbackApp : public AppBasic {
  public:
	void setup();
	void memberFunction();
	
	Anim<Vec2f> mPos;
};

struct ExampleFunctor {
	ExampleFunctor( )
	{}
	
	void operator()() {
		console() << "I'm being executed at the end of the animation" << std::endl;
	}
};

void CustomCallbackApp::setup()
{
	//initialize mPos
	mPos = Vec2f( 0.0f, 0.0f );

	//start animation when program begins
	timeline().apply( &mCircle.mPos, Vec2f( 200.0f, 200.0f ), 2.0f, EaseInOutCubic() ).finishFn(  ExampleFunctor( )  );
}
 //maybe should place draw function in here....

\endcode

<br />

<ul>
 <li> 3.) Lambdas. If you're using C++0x <!-- maybe discuss if this is available for vs2010 and/or xcode -->, you can use Lambda expressions. Lambda expressions essentially is a function that has a body, but does not have a name. Lambda expressions also maintain state so it can access variables that are available to the enclosing scope. [Lambda Expressions in C++ - MSDN](http://msdn.microsoft.com/en-us/library/dd293608.aspx). See below for a simple example.
</ul>

\code
	timeline().apply( ... ).startFn( []{ app::console() << "This tween is starting."; } );
\endcode

<br />

## Cues ##

Using Timeline you can set up Cue points. These can help trigger certain events at specified times throughout your animation. For example, here is a Functor example that fires in 5 seconds after the animation has started.

<br />

\code

struct Say { // Simple functor to print stuff to the console
  Say( std::string message ) : mMessage( message ) {}
  void operator()(){ app::console() << mMessage << std::endl; }

  std::string mMessage;
};

timeline().add( Say( "Hi!" ), timeline().getCurrentTime() + 5 );

\endcode

<br />
...or if you would like to use lambdas (assuming your compiler supports it):
<br />

\code

timeline().add( []{ app::console() << "Howdy"; }, timeline().getCurrentTime() + 5 );

\endcode

## Looping ##

### Standard Looping ###

### Looping with cues ###

## Advanced Usage ##

### Using Step or StepTo ###

### Nest Timelines ###

### Create Timeline Items ###

#### Auto Remove ####

### Ping-ponging ###

### Using TweenRef ###

### Using Timeline::applyPtr ###

### Using Timeline::appendToPtr ###

### Creating a timeline on a seperate thread ###

### Creating nonrealtime animations ###

*/