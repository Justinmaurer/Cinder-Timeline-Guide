/**
\page guide_Timeline Using Timeline in Cinder

\htmlonly
<head>
	 <style>
		div.block{
		  position:absolute;
		  background-color:#abc;
		  left:50px;
		  width:50px;
		  height:50px;
		  margin:5px;
		}
	 </style>
	<script type="text/javascript" src="jquery-1.2.1.js"></script>  
	<script src="jquery.easing.1.3.js" type="text/javascript"></script> 
</head>
\endhtmlonly

## Introduction ##

Cinder provides a tweening engine called Timeline for creating full featured animations. Timeline has been designed to easily animate variables over time without having to keep track of them. Flash developers familiar with [Tween Lite](http://www.greensock.com/tweenlite/) can use this as a somewhat similar context when working with Timeline. Those familiar with After Effects (AE) can use this as a frame of reference to visualize how Timeline is used.

## Basic Usage ##

The master class called Timeline manages a collection of *Anims*. Anims are variables that can be *tweened* or animated over time. The app <!-- the app class, namespace, project --> always contains a master timeline which is accessed similar to the way you would use console().

<br />
Before anything can be done first make sure timeline is included in your project:

\code
#include "cinder/Timeline.h"
\endcode

After you've included Timeline see below for a very basic example using it:
\code
Anim<float> radius;
radius = 0.0f;
timeline().apply( &radius, 10.0f, 1.5f, EaseOutCubic() );
\endcode

<br />

<!-- maybe show how this is represented in the draw function as well -->
<img src="#" alt="Tween code above in svg and js" width="450" height="250">

<br />

In the example above the variable *radius* is of Anim type. The value is then initialized to 0.0 as if you <!-- almost -->  were actually using a float. On the master timeline we use the the apply function to tween the radius to a final value of 10.0 over 1.5 seconds using the EaseOutCubic function.  

It is important to note that the master timeline's apply function is accepting a *pointer* to the Anim radius along with the easing function used. The easing function is basically the equation that is applied to your Anim variable over time. This is described in more detail in the following section below.

<br />

## Ease Functions ##

Using Timeline you can apply different easing equations to produce a desired effect to your anims.

Linear
<p> EaseInQuad
<p> EaseOutQuad
<p> EaseInCubic
<p> EaseOutCubic
<p> EaseInQuart
<p> EaseOutQuart
<p> EaseInOutQuart
<p> EaseInQuint
<p> EaseOutQuint
<p> EaseInOutQuint
<p> EaseInExpo
<p> EaseOutExpo
<p> EaseInCirc
<p> EaseOutCirc
<p> EaseInOutCirc
<p> EaseInSine
<p> EaseOutSine
<p> EaseInOutSine
<p> EaseInBack
<p> EaseOutBack
<p> EaseInOutBack
<p> EaseInElastic
<p> EaseOutElastic
<p> EaseInOutElastic
\htmlonly
	<br />
	<button id="easeInOutElasticButton">&raquo;</button>
	<div class="block" id="easeInOutElasticDiv">
	</div>	

	<script type="text/javascript">  
	$("#easeInOutElasticButton").click(function(){
	  $("#easeInOutElasticDiv").animate({"left": "50px"}, 0, "" );
	  $("#easeInOutElasticDiv").animate({"left": "+=300px"}, 5000, "easeInOutElastic");
	});
	</script>
	<br /><br /><br />
\endhtmlonly
<p> EaseInBounce
\htmlonly
	<br />
	<button id="easeInBounceButton">&raquo;</button>
	<div class="block" id="easeInBounceDiv">
	</div>	

	<script type="text/javascript">  
	$("#easeInBounceButton").click(function(){
	  $("#easeInBounceDiv").animate({"left": "50px"}, 0, "" );
	  $("#easeInBounceDiv").animate({"left": "+=300px"}, 5000, "easeInBounce");
	});
	</script>
	<br /><br /><br />
\endhtmlonly

<br /> EaseOutBounce
<br /> EaseInOutBounce


<br />

Additionally, [Chris Mckenzie] (http://chrismckenzie.com/) has contributed a list of easing equations:

<ul>
	<li> EaseInAtan
	<li> EaseOutAtan
	<li> EaseInOutAtan
</ul>

<br />

## Callbacks ##

Within Timeline, callbacks can be trigged during certain points within your animation. Say for example you want to run a function at the start, during each update, and/or completion of your animation.

However, Timeline needs your callback function be in the following format:

<br />
<br />

<ul>
 <li> 1.) Free Function. This means your function must not be a member of a class or struct. Below is an example of timeline using a free function
</ul>

\code
class CustomCallbackApp : public AppBasic {
  public:
	void setup();
	void memberFunction();
	
	Anim<Vec2f> mPos;
};

void freeFunction()
{
	//this is your free function, it can
	//be any name just not a member of your class
	
	console() << "I'm being executed at the start of the animation" << std::endl;
}

void CustomCallbackApp::memberFunction()
{
  //just placed here to show the difference
}

void CustomCallbackApp::setup()
{
	//initialize mPos
	mPos = Vec2f( 0.0f, 0.0f );

	//start animation when program begins
	timeline().apply( &mCircle.mPos, Vec2f( 200.0f, 200.0f ), 2.0f, EaseInOutCubic() ).startFn(  freeFunction  );
}
 //maybe should place draw function in here....


\endcode

<br />

<ul>
 <li> 2.) Functors. Functors are a class with one or more private members to store the state and with an overloaded operator () to execute the function. [http://www.newty.de](http://www.newty.de/fpt/functor.html) 
</ul>

\code
class CustomCallbackApp : public AppBasic {
  public:
	void setup();
	void memberFunction();
	
	Anim<Vec2f> mPos;
};

struct ExampleFunctor {
	ExampleFunctor( )
	{}
	
	void operator()() {
		console() << "I'm being executed at the end of the animation" << std::endl;
	}
};

void CustomCallbackApp::setup()
{
	//initialize mPos
	mPos = Vec2f( 0.0f, 0.0f );

	//start animation when program begins
	timeline().apply( &mCircle.mPos, Vec2f( 200.0f, 200.0f ), 2.0f, EaseInOutCubic() ).finishFn(  ExampleFunctor( )  );
}
 //maybe should place draw function in here....

\endcode

<br />

<ul>
 <li> 3.) Lambdas. If you're using C++0x <!-- maybe discuss if this is available for vs2010 and/or xcode -->, you can use Lambda expressions. Lambda expressions essentially is a function that has a body, but does not have a name. Lambda expressions also maintain state so it can access variables that are available to the enclosing scope. [Lambda Expressions in C++ - MSDN](http://msdn.microsoft.com/en-us/library/dd293608.aspx). See below for a simple example.
</ul>

\code
	timeline().apply( ... ).startFn( []{ app::console() << "This tween is starting."; } );
\endcode

<br />

## Cues ##

Using Timeline you can set up Cue points. These can help trigger certain events at specified times throughout your animation. For example, here is a Functor example that fires in 5 seconds after the animation has started.

\code

struct Say { // Simple functor to print stuff to the console
  Say( std::string message ) : mMessage( message ) {}
  void operator()(){ app::console() << mMessage << std::endl; }

  std::string mMessage;
};

timeline().add( Say( "Hi!" ), timeline().getCurrentTime() + 5 );

\endcode

<br />
...or if you would like to use lambdas (assuming your compiler supports it):

\code

timeline().add( []{ app::console() << "Howdy"; }, timeline().getCurrentTime() + 5 );

\endcode

## Looping ##

Using Timeline you can create loops on a given animation. These can be standard loops or loops based on a cue.

<br />

### Standard Looping ###

See below for a quick example creating an animation with standard looping using Timeline:

\code

class LoopingExample : public AppBasic {
  public:
	void setup();
	void mouseDown( MouseEvent event );	
	void keyDown( KeyEvent event );
	void draw();

	Anim<Vec2f> mAnim;
	TimelineRef mTimeline;
};

void LoopingExample::setup()
{
	mTimeline = timeline().create();
	timeline().add( mTimeline );
	mTimeline->setLoop( true );
}

void LoopingExample::mouseDown( MouseEvent event )
{
	mTimeline->apply( &mAnim, Vec2f( event.getPos() ), 4.50f,  EaseOutCubic() );
}

void LoopingExample::draw()
{
	// clear out the window with black
	gl::clear( Color( 0, 0, 0 ) ); 

	gl::color( Color(1.0, 0.0, 0.0) );
	gl::drawSolidCircle( mAnim, 10 );
}
\endcode

<br />

### Looping with cues ###

In Timeline you can also create loops with cues. In this example the Say functor will be ran 5 seconds after the timeline begins, after that, every 1.0 second it will be ran again. See below:

\code
void LoopingExample::setup()
{
	CueRef cue = timeline().add( Say( "Hi!" ), timeline().getCurrentTime() + 5 );
	cue->setDuration( 1.0f );
	cue->setLoop( );
}
\endcode

<br />

## Advanced Usage ##

<br />
### Using Step or StepTo ###

You can create your own Timeline and then advance it (using step() or stepTo()) however you please. If you are a Flash person, this is how you can create a frame-based Timeline instead of a time-based one.
<br /><br />

#### Using StepTo ####

You can use Timeline to "step" through a timeline that you've created. Below is an example...

\code
class LoopingExample : public AppBasic {
  public:
	void setup();
	void mouseUp( MouseEvent event );	
	void keyDown( KeyEvent event );
	void draw();
	void update();

	Anim<Vec2f> mAnim;
	TimelineRef mTimeline;
	float mStepTo;
	float mStepSize;
};


void LoopingExample::setup()
{
	mAnim = Vec2f( 10.0f , 10.0f );

	mTimeline = Timeline::create();
	mTimeline->setDefaultAutoRemove( false );
	mTimeline->apply( &mAnim, Vec2f( 400, 400 ), 4.5f, cinder::EaseInBack() );

	mStepTo = 0.0;
	mStepSize = .03;

}

void LoopingExample::draw()
{

	// clear out the window with black
	gl::clear( Color( 0, 0, 0 ) ); 

	gl::color( Color(1.0, 0.0, 0.0) );
	gl::drawSolidCircle( mAnim, 10 );

}

void LoopingExample::keyDown( KeyEvent event )
{

	if ( event.getCode() == event.KEY_DOWN ){
		mStepTo -= mStepSize;
	}
	else if ( event.getCode() == event.KEY_UP  ){
		mStepTo += mStepSize;
	}
	
	mTimeline->stepTo( mStepTo );

}
\endcode

<br />
#### Using Step ####

If you just need to specify the step size at which your timeline is updated you can use step( float stepSize  ). 

\code
	void LoopingExample::keyDown( KeyEvent event )
	{

		if ( event.getCode() == event.KEY_DOWN ){
			mTimeline->step( -mStepSize );
		}
		else if ( event.getCode() == event.KEY_UP  ){
			mTimeline->step( mStepSize );
		}
		
	}
\endcode

<br />
### Nesting Timelines ###

You can nest Timelines. Create your own Timeline and add it to another Timeline. And then add that to another Timeline. Just keep in mind an Anim<> can only be a member of one Timeline at a time. If you apply() to it with a new Timeline it will deregister itself from the old one automatically.

Below is a quick example of nesting timelines:

\code

//variable declaration and initialization
Anim<Vec2f> mAnim1;
Anim<Vec2f> mAnim2;
Anim<Vec2f> mAnim3;

TimelineRef mTimeline;
TimelineRef mTimeline2;

mTimeline = timeline().create();
mTimeline2 = timeline().create();

timeline().add( mTimeline );
mTimeline->add( mTimeline2 );

timeline().apply( &mAnim1, Vec2f( 100.0f, 100.0f ), 2.0f,   EaseInCubic() );
mTimeline->apply( &mAnim2, Vec2f( 100.0f, 350.0f ), 2.5f,   EaseInBounce() );
mTimeline2->apply( &mAnim3, Vec2f( getWindowSize() ), 3.0f, EaseInCirc() );	


//in the draw method
gl::color( Color( 1.0f, 0.0f, 0.0f ) );
gl::drawSolidCircle( mAnim1, 5.0f );

gl::color( Color( 1.0f, 1.0f, 0.0f ) );
gl::drawSolidCircle( mAnim2, mAnim2().x );

gl::color( Color( 0.0f, 1.0f, 0.0f ) );
gl::drawSolidCircle( mAnim3, 20.0f );
\endcode
<br />

<!-- taking this out for now -->
<!-- ### Create Timeline Items ### -->

#### Auto Remove ####

### Ping-ponging ###

### Using TweenRef ###

### Using Timeline::applyPtr ###

### Using Timeline::appendToPtr ###

### Creating a timeline on a seperate thread ###

### Creating nonrealtime animations ###

*/